📗
	A model for sorting 🔢 lists with the bead sort algorithm.
📗
🐇 📿 🍇
	🖍🆕 rows 🔢
	🖍🆕 columns 🔢
	🖍🆕 matrix 🍨🐚👌🍆

	📗 Instantiates a new model ready to sort `list`. 📗
	🆕 list 🍨🐚🔢🍆 🍇
		🍇 a 🔢 b 🔢 ➡ 🔢
			↪ a ▶ b 🍇
				↩ a
			🍉
			🙅‍♀️ 🍇
				↩ b
			🍉
		🍉 ➡ max

		📏 list ❓ ➡ 🖍 rows
		🍺 🐧 list max ❗ ➡ 🖍 columns

		🆕🍨🐚👌🍆 👎 rows ✖ columns ❗ ➡ 🖍 matrix
		🔂 i 🆕⏩ 0 rows ❗ 🍇
			🔂 j 🆕⏩ 0 🐽 list i ❗ ❗ 🍇
				👍 ➡ 🐽 matrix i ✖ columns ➕ j ❗
			🍉
		🍉
	🍉

	📗 Returns the element of the matrix at position `row` `column`. 📗
	🔐 ❗ 🐽 row 🔢 column 🔢 ➡ 👌 🍇
		↩ 🐽 matrix row ✖ columns ➕ column ❗
	🍉
	📗 Sets the element of the matrix at position `row` `column`. 📗
	🔐 ➡ 🐽 value 👌 row 🔢 column 🔢 🍇
		value ➡ 🐽 matrix row ✖ columns ➕ column ❗
	🍉

	📗
		If possible, updates the model and returns 👍. Otherwise the model is
		untouched and the method returns 👎.
	📗
	❗ 👣 ➡ 👌 🍇
		👎 ➡ 🖍🆕 did_something

		🔂 r 🆕⏩ rows ➖ 2 -1 ❗ 🍇
			0 ➡ 🖍🆕 c
			🔁 c ◀ columns 🤝 🐽 👇 r c ❗ 🍇
				↪ ❎ 🐽 👇 r ➕ 1 c ❗ ❗ 🍇
					👎 ➡ 🐽 👇 r c ❗
					👍 ➡ 🐽 👇 r ➕ 1 c ❗

					👍 ➡ 🖍 did_something
				🍉
				c ⬅➕ 1
			🍉
		🍉

		↩ did_something
	🍉

	📗
		Completely steps through the model and then collects and returns the
		numbers in order.
	📗
	❗ 🔗 ➡ 🍨🐚🔢🍆 🍇
		🆕🍨🐚🔢🍆▶🐴 rows ❗ ➡ 🖍🆕 list

		🔁 👣 👇 ❗ 🍇 🍉

		0 ➡ 🖍🆕 c
		🔂 r 🆕⏩ 0 rows ❗ 🍇
			🔁 c ◀ columns 🤝 🐽 👇 r c ❗ 🍇
				c ⬅➕ 1
			🍉
			🐻 list c ❗
		🍉

		↩ list
	🍉

	📗 Returns a visual representation of the model. 📗
	❗ 🔡 ➡ 🔡 🍇
		🆕🔠 rows ✖ columns ➕ rows ❗ ➡ sb

		🔂 r 🆕⏩ 0 rows ❗ 🍇
			🔂 c 🆕⏩ 0 columns ❗ 🍇
				↪ 🐽 👇 r c ❗ 🍇
					🐻 sb 🔤🧿🔤 ❗
				🍉
				🙅‍♀️ 🍇
					🐻 sb 🔤🛫🔤 ❗
				🍉
			🍉
			🐻 sb 🔤❌n🔤 ❗
		🍉

		↩ 🔡 sb ❗
	🍉
🍉